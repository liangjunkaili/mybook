提出问题：
    什么是RPC？
        remote procedure call（远程过程调用），这是相对于本地过程调用来说的，本地过程调用这个就不解释了
    如何让调用远程方法也和调用本地方法一样方便？
        这个就是RPC要做的事了
    如何自己实现一个RPC框架？
        1、如何通信？
        2、序列化与反序列化
        3、服务注册中心
        4、负载均衡策略








优选netty
需要考虑的问题：
    网络传输方式
        异步非阻塞通信（NIO）、I/O多路复用技术（Selector）
    序列化性能
        网络带宽的占用
        CPU资源的占用
        是否支持跨语言
    线程模型
        Reactor线程模型
            单线程（所有的I/O操作都在同一个NIO线程上完成）
            多线程（换成一组NIO线程、线程池技术）
            主从多线程（将接受客户端连接的线程也换成了一个NIO线程池）
高效的并发编程：
    volatile的大量、正确的使用
    CAS和原子类的广泛使用
    线程安全容器的使用
    通过读写锁提升并发性能