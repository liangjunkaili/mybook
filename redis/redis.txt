1、redis是什么？
	一种基于键值对（key-value）的NoSQL内存数据库。
2、redis特性？
	速度快（10万/秒）
		数据放在内存中
		用C语言实现的
		使用了单线程架构，预防了多线程可能产生的竞争问题
		源代码是精打细磨的
	基于键值对的数据结构服务器
		redis中的值可以是string、hash、list、set、zset、Bitmaps、HyperLogLog、GEO（3.2）等多种数据结构和算法。
	丰富的功能
		键过期，实现缓存
		发布订阅，实现消息系统
		事务，能在一定程度上保证事务特性
		流水线，客户端能将一批命令一次性传到redis，减少了网络的开销
		Lua脚本（2.6），利用Lua创造出新的redis命令
	简单稳定
		源码很少
		单线程模型
		不需要依赖于操作系统中的类库，自己实现了事件处理的相关功能
	客户端语言多：提供了简单的TCP通信协议
	持久化
		RDB
		AOF
	主从复制：复制功能是分布式redis的基础
	高可用和分布式
		redis Sentinel
		redis Cluster（3.0）
3、redis的使用场景
	缓存（键值过期时间设置，控制最大内存，内存溢出后的淘汰策略）
	排行榜系统（列表和有序集合）
	计数器应用（计数功能）
	社交网络
	消息队列系统（发布订阅和阻塞队列功能）
4、redis不能干什么？
	数据量非常大
	冷数据
5、用好redis的建议
	切勿当作黑盒使用，开发与运维同样重要（了解其原理）
	阅读源码
6、预备
	全局命令
		keys *（O(n)）：查看所有键
		dbsize（O(1)）：键总数
		exists key：检查键是否存在
		del key [key ...]：删除键
		expire key seconds：键过期
		ttl key：返回键的剩余过期时间（-1：没设置过期时间，-2键不存在）
		pttl key：返回键的剩余过期时间，毫秒（-1：没设置过期时间，-2键不存在）
		type key：键的数据结构类型
		object encoding key：查询内部编码
	数据结构和内部编码
		可以改进内部编码，而对外的数据结构和命令没有影响
		多种内部编码实现可以在不同场景下发挥各自的优势
	单线程架构（为什么还能这么快？）
		纯内存访问
		非阻塞I/O（使用epoll作为I/O多路复用技术的实现）
		避免了线程切换和竞态产生的消耗
7、redis的数据结构类型
	string:可以是字符串、整数、浮点数、二进制（最大不能超过512M）
		get：获取存储在给定键中的值
		set：设置存储在给定键中的值（setnx：键必须不存在，才能设置成功，可以作为分布式锁的一种实现方案，setxx）
		mset：批量设置值（减少网络开销）
		mget：批量获取值
		incr：incr key-name 将键存储的值加上1
		decr：decr key-name 将键存储的值减去1
		incrby：incrby key-name amount将键存储的值加上整数amount
		decrby：decrby key-name amount将键存储的值减去整数amount
		incrbyfloat：incrbyfloat key-name amount将键存储的值加上浮点数amount
		append：将值value追加到给定键key-name当前存储的值得末尾
		strlen：字符串长度
		getset：设置并返回原值
		getrange：获取一个由偏移量start至偏移量end范围内所有字符组成的子串，包括start和end在内
		setrange：将从start偏移量开始的子串设置为给定值
		getbit：将字符串看做是二进制位串，并返回位串中偏移量为offset的二进制位的值
		setbit：将字符串看做是二进制位串，并将位串中偏移量为offset的二进制位的值设置为value
		bitcount：统计二进制位串里面值为1的二进制位的数量，如果给定了可选的start偏移量和end偏移量，那么只对偏移量指定范围内的二进制位进行统计
		bittop：对一个或多个二进制位串执行包括并、或、异或、非在内的任意一种为运算操作，并将计算得出的结果保存在dest-key键里面
		内部编码
			int：8个字节的长整型
			embstr：小于等于39个字节的字符串
			raw：大于39个字节的字符串
		典型使用场景
			缓存功能（加速读写，降低后端压力）
			计数（快速计数，查询缓存）
			共享Session（应用于分布式）
			限速（发短信一分钟不能超过5次，一个IP不能在一秒内访问超过n次）
	list：有序，可重复，对列表两端插入和弹出
		rpush：将给定值推入列表的右端
		lpush：将给定值推入列表的左端
		lrange：获取列表在给定范围上的所有值
			索引下标的特点
				从左到右分别是0到N-1，从右到左分别是-1到-N
				lrange中的end选项包含了本身
		linsert key before|after pivot value：向某个元素前或后插入元素，返回当前列表的长度
		lindex：获取列表在给定位置上的单个元素
		llen：获取列表长度
		lpop：从列表的左端弹出一个值，并返回被弹出的值
		rpop：从列表的右端弹出一个值，并返回被弹出的值
		lrem key count value：删除指定元素
			count>0：从左到右，删除最多count个元素
			count<0：从右到左，删除最多count绝对值个元素
			count=0：删除所有
		ltrim：对列表进行修剪，只保留从start偏移量到end偏移量范围内的元素，包括start和end
		lset key index newValue：修改指定索引下标的元素
		blpop：从第一个非空列表中弹出位于最左端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现
		brpop：从第一个非空列表中弹出位于最右端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现
		rpoplpush：从source-key列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，并向用户返回这个元素
		brpoplpush：从source-key列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，并向用户返回这个元素，如果source-key为空，那么在timeout秒之内阻塞并等待可弹出的元素出现
		内部编码
			ziplist：当列表的元素个数小于list-max-ziplist-entries配置（512个），同时列表中每个元素的值都小于list-max-ziplist-value配置（64字节），减少内存的使用
			linkedlist（链表）：当列表类型无法满足ziplist的条件时
			quicklist（3.2）：以一个ziplist为节点的linkedlist，结合了两者的优势
		使用场景
			消息队列（lpush+brpop）：实现阻塞队列
			文章列表
			lpush+lpop=Stack
			lpush+rpop=Queue
			lpush+ltrim=Capped Collection（有限集合）
			lpush+brpop=Message Queue
	set：无序，不可重复
		sadd：将给定元素添加到集合，并返回被添加元素当中原本并不存在与集合里面的元素数量
		smembers：返回集合包含的所有元素
		sismember：检查给定元素是否存在于集合中
		srem：如果给定的元素存在于集合中，那么移除这个元素，并返回被移除元素的数量
		scard：返回集合包含的元素的数量
		srandmember：从集合里面随机地返回一个或多个元素，当count为正数时，命令返回的随机元素不会重复，当count为负数时，命令返回的随机元素可能会出现重复
		spop：随机地移除集合中的一个元素，并返回被移除的元素
		smove：如果集合source-key包含元素item，那么从集合source-key里面移除元素item，并将元素item添加到集合dest-key中，如果item被成功移除，那么命令返回1，否则返回0
		sdiff：返回那些存在于第一个集合、但不存在于其他集合中的元素（差集运算）
		sdiffstore：将那些存在于第一个集合但并不存在于其他集合中的元素存储到dest-key键里面
		sinter：返回那些同时存在于所有集合中的元素
		sinterstore：将那些同时存在于所有集合的元素存储到dest-key键里面
		sunion：返回那些至少存在于一个集合中的元素
		sunionstore：将那些至少存在于一个集合中的元素存储到dest-key键里面
		内部编码
			intset（整数集合）：当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（512个），减少内存
			hashtable（哈希表）：无法满足intset的条件时
		使用场景
			标签（tag）：sadd
			生成随机数：比如抽奖，spop/srandmember
			社交需求：sadd+sinter
	hash：存储多个键值对之间的映射
		hset：在散列里面关联起给定的键值对（hsetnx）
		hget：获取指定散列键的值
		hgetall：获取散列包含的所有键值对
		hdel：如果给定键存在于散列里面，那么移除这个键
		hlen：计算field个数
		hmget/hmset：批量设置或获取field-value
		hexists：判断field是否存在
		hkeys：获取所有的field
		hvals：获取所有的value
		hincrby：类似incrby
		hincrbyfloat：类似incrbyfloat
		hstrlen：计算value的字符串长度
		内部编码
			ziplist（压缩列表）：当哈希类型元素小于hash-max-ziplist-entries配置（512个），同时所有值都小于hash-max-ziplist-value配置（64字节）
				使用更加紧凑的结构实现多个元素的连续存储，节省内存
			hashtable（哈希表）：无法满足ziplist的条件时，O(1)
		使用场景（哈希类型是稀疏的，而关系型数据库是完全结构化的；关系型数据库可以做复杂的关系查询）
			缓存用户信息
	zset：存储键值对，键是成员，各不相同，值是分值，必须为浮点数，既可以根据成员访问元素，又可以根据分值以及分值的排列顺序来访问元素的结构
		zadd：将一个带有给定分值的成员添加到有序集合里面（3.2：nx添加/xx更新/ch/incr）O(log(n))
		zcard：计算成员个数
		zscore：计算某个成员的分数
		zrank（分数从低到高）/zrevrank（反之）：计算成员的排名
		zincrby：增加成员的分数
		zrange（分数从低到高）/zrevrange（反之）：根据元素在有序排列中所处的位置，从有序集合里面获取多个元素
		zrangebyscore/zrevrangebyscore：获取有序集合在给定分值范围内的所有元素
		zrem：如果给定成员存在于有序集合，那么移除这个成员
		zcount：返回指定分数范围成员个数
		zremrangebyrank：删除指定排名内的升序元素
		zremrangebyscore：删除指定分数范围的成员
		zinterstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]:交集
			destination：交集计算结果保存到这个键
			numkeys：需要做交集计算键的个数
			key [key ...]：需要做交集计算的键
			[weights weight [weight ...]]：每个键的权重（默认为1），在做交集计算时，每个键中的每个member会将自己分数乘以这个权重
			[aggregate sum|min|max]：计算成员交集后，分值可以按照sum、min、max做汇总，默认是sum
		zunionstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]：并集
		内部编码
			ziplist：当有序集合的元素个数小于zset-max-ziplist-entries配置（128），同时每个元素的值都小于zset-max-ziplist-value配置（64字节），减少内存的使用
			skiplist（跳跃表）：当ziplist条件不满足时
		使用场景
			排行榜系统
8、键管理
	单个键管理
		rename key newkey：键重命名（renamenx：确保只有newkey不存在时才被覆盖）
		randomkey：随机返回一个键
		expire key seconds：键在seconds秒后过期
		expireat key timestamp：键在秒级时间戳timestamp后过期
		pexpire key milliseconds：键在milliseconds毫秒后过期
		pexpireat key milliseconds-timestamp：键在毫秒级时间戳milliseconds-timestamp后过期
		move key db：用于在redis内部进行数据迁移
		dump key+restore key ttl value：
			1、在源redis上，dump将键值序列化，格式采用的是RDB格式
			2、在目标redis上，restore将上面序列化的值进行复原，其中ttl参数代表过期时间
		migrate host port key|"" destination-db timeout [copy] [replace] [keys key [key ...]](具有原子性)
			host：目标redis的IP地址
			port：目标redis的端口
			key|""：要迁移的键
			destination-db：目标redis的数据库索引
			timeout：迁移的超时时间
			[copy]：添加此项，迁移后并不删除源键
			[replace]：添加此项，migrate不管目标redis是否存在该键都会正常迁移进行数据覆盖
			[keys key [key ...]]：迁移多个键
	遍历键
		keys pattern
			*：任意字符
			？：一个字符
			[]：匹配部分字符
		scan cursor [match pattern] [count number]：渐进式遍历
			cursor：一个游标，第一次从0开始，每次scan遍历完都会返回当前游标的值，直到为0，表示结束。
			[match pattern]：做模式的匹配
			[count number]：表明每次要遍历的键个数
	数据库管理
		select DBIndex：切换数据库
		flushdb/flushall：用于清除数据库
9、持久化
		RDB：把当前进程数据生成快照保存到硬盘的过程，
			优点
				是一个紧凑压缩的二进制文件，代表redis在某个时间点上的数据快照，非常适合用于备份，全量复制等场景
				redis加载RDB恢复数据远远快于AOF的方式
			缺点
				没办法做到实时持久化、秒级持久化
				使用特定二进制格式保存，redis版本演进过程中有多个格式的RDB版本，存在老版本无法兼容新版格式的问题
			手动触发
				save：阻塞当前redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上不建议使用。
				bgsave：redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。
			自动触发
				使用save相关配置。save m n
				如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点
				执行debug reload命令重新加载redis时，也会自动触发save操作
				默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。
			bgsave运作流程：
				执行bgsave命令，redis父进程判断当前是否存在正在执行的子进程（RDB/AOF子进程），如果存在bgsave命令直接返回
				父进程执行fork操作创建子进程，fork操作过程中父进程会阻塞，通过info stats命令查看latest_fork_usec选项，可以获取最近一个fork操作的耗时，单位为微妙
				父进程fork完成后，bgsave返回“Background saving started”信息并不再阻塞父进程，可以继续响应其他命令
				子进程创建RDB文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。执行lastsave命令可以获取最后一次生成RDB的时间，对应info统计的rdb_last_save_time选项
				进程发送信号给父进程表示完成，父进程更新统计信息
			保存在dir配置指定的目录下，文件名通过的吧filename指定
			采用LZF算法对生成的RDB文件做压缩处理
			如果redis加载损坏的RDB文件时拒绝启动（使用redis-check-dump工具检进行测）
		AOF：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中的命令达到恢复数据的目的。
			解决了数据持久化的实时性，是redis持久化的主流方式
			开启AOF：appendonly yes
			文件名通过appendfilename配置，默认appendonly.aof
			工作流程：
				所有的写入命令会追加到aof_buf中
					写入的内容直接是文本协议格式
				AOF缓冲区根据对应的策略向硬盘做同步操作
					appendfsync：
						always
						everysec
						no
				随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩的目的。
				当redis服务器重启时，可以加载AOF文件进程数据恢复