1、在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。
2、相关的类
- Class类：反射的核心类，可以获取类的属性，方法等信息。
- Field类：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。
- Method类： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。
- Constructor类： Java.lang.reflec包中的类，表示类的构造方法。
3、使用
	获取Class对象
	使用反射API
	创建对象实例
	调用方法invoke(Object obj,Object... args),obj是对象实例，args是指方法的参数

java动态代理
1、两个重要的类或者接口，InvocationHandler和Proxy
2、动态代理类必须实现InvocationHandler
3、Proxy用来动态创建一个代理对象的类，newProxyInstance

接口、实现类、代理类

如何使用反射？
1、获取Class对象
    Class.forName(args):args是类的全路径名称
    Object.class
    new Object().getClass()
2、通过Class创建对象
    clazz.newInstance();
    Constructor constructor = clazz.getConstructor();-->constructor.newInstance();
3、获取类的属性
    clazz.getFields()/clazz.getField("")
        返回当前类或者超类的public的属性
    clazz.getDeclaredFields()/clazz.getDeclaredField("")
        返回当前类的所有声明的属性
4、获取类的方法
    clazz.getDeclaredMethods()/clazz.getDeclaredMethod("",Class<?>...)
        返回当前类的所有声明的方法
    clazz.getEnclosingMethod()
    clazz.getMethods()/clazz.getMethod("",Class<?>...)
        返回当前类或者超类的public的方法
5、获取构造方法
    clazz.getConstructors()/clazz.getConstructor("")
        返回当前类的public构造方法
    clazz.getDeclaredConstructors()/clazz.getDeclaredConstructor("")
        返回当前类的所有声明的构造方法
6、获取注解
    clazz.getDeclaredAnnotations()
        返回直接存在于此元素上的所有注释。该方法将忽略继承的注释
    clazz.getAnnotations()
        包括继承的所有注释
7、获取内部类
    clazz.getClasses()
        返回当前类或者超类的public的内部类
    clazz.getDeclaredClasses()
        返回当前类的所有的内部类