我想ArrayList应该是日常开发中用的比较多的一个集合类了吧？但有些问题，可能没有好好想过。
为什么要用ArrayList了，而不用Vector、linkedList等呢？
先都别吵吵，先看看它到底是个啥玩意吧？
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
public interface List<E> extends Collection<E>
public interface Collection<E> extends Iterable<E>
public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E>
public abstract class AbstractCollection<E> implements Collection<E>
上面是他的继承关系，由于是存文本的关系，就凑活看吧，稍后我整个画图工具发个博客哇。
那接下来我们就挨个看看他的父类或者接口吧；
java.io.Serializable：简单点说就是标识是一个可序列化和反序列化的接口，强烈建议所有可序列化的类都明确声明serialVersionUID值
Cloneable：实现该接口，可以合法调用Object的clone()方法，注意：应使用公共方法覆盖Object.clone （受保护）
RandomAccess：List实现使用的标记界面，表明它们支持快速（通常为恒定时间）随机访问。 此接口的主要目的是允许通用算法更改其行为，
              以便在应用于随机访问列表或顺序访问列表时提供良好的性能。
Iterable<E>：实现此接口允许对象成为“for-each loop”语句的目标
    iterator()
    default void forEach(Consumer<? super T> action)
    default Spliterator<T> spliterator()
Collection<E>：集合的根接口，定义一些集合的基本方法
    int size()
    boolean isEmpty()
    boolean contains(Object o)
    boolean containsAll(Collection<?> c)
    Object[] toArray()
    <T> T[] toArray(T[] a)
    boolean add(E e)
    boolean addAll(Collection<? extends E> c)
    boolean remove(Object o)
    boolean removeAll(Collection<?> c)
    boolean retainAll(Collection<?> c)
    void clear()
    default boolean removeIf(Predicate<? super E> filter)
    default Stream<E> stream()
    default Stream<E> parallelStream()
List<E>：有序集合的根接口，允许重复，定义一些有序集合的基本方法
    boolean addAll(int index, Collection<? extends E> c)
    E get(int index)
    E set(int index, E element)
    void add(int index, E element)
    E remove(int index)
    int indexOf(Object o)
    int lastIndexOf(Object o)
    ListIterator<E> listIterator()
    ListIterator<E> listIterator(int index)
    List<E> subList(int fromIndex, int toIndex)
    default void replaceAll(UnaryOperator<E> operator)
    default void sort(Comparator<? super E> c)
 AbstractCollection<E>：实现了Collection<E>的一些方法，定义了数组的最大容量（MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8）
    public boolean isEmpty()
    public boolean contains(Object o)
    public Object[] toArray()
    public <T> T[] toArray(T[] a)
    public boolean remove(Object o)
    public boolean containsAll(Collection<?> c)
    public boolean addAll(Collection<? extends E> c)
    public boolean removeAll(Collection<?> c)
    public boolean retainAll(Collection<?> c)
    public void clear()
    public boolean add(E e)；不支持此操作
AbstractList<E>：实现了一些方法
    public boolean add(E e)
    public int indexOf(Object o)
    public int lastIndexOf(Object o)
    public void clear()
    public boolean addAll(int index, Collection<? extends E> c)
    public Iterator<E> iterator()
    public ListIterator<E> listIterator()
    public ListIterator<E> listIterator(final int index)
    public List<E> subList(int fromIndex, int toIndex)
    protected void removeRange(int fromIndex, int toIndex)
    不支持此操作：
    public E set(int index, E element)
    public void add(int index, E element)
    public E remove(int index)
ArrayList:一些常用的方法
    public int indexOf(Object o)
    public int lastIndexOf(Object o)
    public E get(int index)
    public E set(int index, E element)
    public boolean add(E e)
    public void add(int index, E element)
    public E remove(int index)
    public boolean remove(Object o)
    public void clear()
    public void trimToSize()
    public void ensureCapacity(int minCapacity)
粗略的过了一下ArrayList的实现关系，下面我们分析一下，常用的几个操作的源码，插入和查询
其实就是数组的操作，很简单，但是要注意一个问题就是数组的动态扩容，默认是原来的1.5倍
1、add方法解读	
	public boolean add(E e) {
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData[size++] = e;
        return true;
    }
	private void ensureCapacityInternal(int minCapacity) {
        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
        }
        ensureExplicitCapacity(minCapacity);
    }
    private void ensureExplicitCapacity(int minCapacity) {
        modCount++;
        // overflow-conscious code
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }
	private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + (oldCapacity >> 1);
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
    private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }
	//以下方法在java.util.Arrays
	@SuppressWarnings("unchecked")
    public static <T> T[] copyOf(T[] original, int newLength) {
        return (T[]) copyOf(original, newLength, original.getClass());
    }
	public static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {
        @SuppressWarnings("unchecked")
        T[] copy = ((Object)newType == (Object)Object[].class)
            ? (T[]) new Object[newLength]
            : (T[]) Array.newInstance(newType.getComponentType(), newLength);
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
    }
2、get方法解读
	public E get(int index) {
        rangeCheck(index);
        return elementData(index);
    }
	private void rangeCheck(int index) {
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }
	@SuppressWarnings("unchecked")
    E elementData(int index) {
        return (E) elementData[index];
    }
3、如何产生null object？
4、如何剔除？