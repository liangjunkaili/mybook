1、mysql的体系结构（应用程序通过接口（ODBC、JDBC）连接到连接层）
	Mysql Server层
		连接层
			通信协议：负责检测客户端版本是否兼容MYSQL服务端
			线程处理：指每一个连接请求都会分配一个对应的线程，相当于一条SQL对应一个线程，一个线程对应一个逻辑CPU，并会在多个逻辑CPU之间进行切换
			用户名密码认证：验证创建的账号和密码，以及host主机授权是否可以连接到MYSQL服务器
		SQL层
			权限判断：审核用户有没有访问某个库、某个表，或者表里某行的权限
			查询缓存：通过Query Cache进行操作，如果数据在Query Cache中，则直接返回结果给客户端
			解析器：针对SQL语句进行解析，判断语法是否正确
			预处理：对解析器无法解析的语义进行处理
			查询优化器：对SQL进行改写和相应的优化，并生成最优的执行计划，就可以调用程序的API接口，通过存储引擎层访问数据
			缓存
			执行计划
	存储引擎层（区别于其他数据库最核心的一点）
2、Query Cache详解
	在生产中建议关闭，因为它只能缓存静态数据信息，一旦数据发生变化，经常读写，Query Cache就变成鸡肋
	两个核心参数
		query_cache_size
		query_cache_type
	mysql数据库的压力测试软件sysbench
3、存储引擎
	InnoDB：支持事务、行锁，支持MVCC多版本并发控制，并发性高；应用于OLTP业务系统
	MyISAM：不支持事务、表锁，8.0之后被废弃，并发很低，资源利用率也很低；OLAP业务系统
	Memory：都在内存中存放，支持Hash和Btree索引，数据安全性不高，读取速度快；对数据安全性不好的环境
	blackhole：并不存储数据，数据写入时只写binlog；做binlog转储或测试
	TokuDB：支持事务，支持压缩功能，高速写入功能（比innoDB快9倍），在线OnlineDDL，不产生索引碎片；海量数据的存储
	MariaDB columnstore：列式存储引擎，高压缩功能；数据仓库，OLAP业务系统
4、InnoDB体系结构
	数据库：一个单进程多线程模型的数据库
	数据库实例：进程加内存的组合
	a、内存结构
		SGA（系统全局区）
			innodb_buffer_pool：用来缓存InnoDB表的数据、索引、插入缓冲、数据字典等信息
			innodb_log_buffer：事务在内存中的缓冲，即redo log buffer的大小。
			Query Cache：高速查询缓存。
			key_buffer_size：只用于MyISAM存储引擎表，缓存MyISAM存储
			innodb_additional_mem_pool_size：用来保存数据字典信息和其他内部数据结构的内存池的大小。（5.7.4被移除）
		PGA（程序缓存区）
			sort_buffer_size：用于SQL语句在内存中的临时排序。
			join_buffer_size：表连接使用，用于BKA。
			read_buffer_size：表顺序扫描的缓存，只能用于MyISAM表存储引擎。
			read_rnd_buffer_size：mysql随机读缓冲区大小，用于做mrr。
		tmp_table_size：SQL语句在排序或者分组时没有用到索引，就会使用临时表空间。
		max_heap_table_size：管理heap、memory存储引擎表。
		default_tmp_storage_engine：临时表默认的存储引擎。
		internal_tmp_disk_storage_engine：在磁盘上临时表的管理，由该参数决定（CREATE TEMPORARY TABLE）
		Buffer状态
			free buffer：从未被使用
			clean buffer：内存中buffer里面的数据和磁盘page的数据一致
			dirty buffer：内存中新写入的数据还没有刷新到磁盘，跟磁盘中数据不一致
		Buffer链表结构
			free list：把那些free状态的buffer都串联起来
			lru list：把那些鱼磁盘数据一致，并且最近最少被使用的buffer串联起来，释放出free buffer，page调到内存中便于使用新的可用buffer
			flush list：把那些dirty buffer串联起来，为了方便刷新线程把脏数据刷到磁盘。
	b、线程
		master Thread：后台线程中的主线程，优先级别最高。
			主循环loop
				每1s操作
					日志缓冲刷新到磁盘，即使这个事务还没有提交
					刷新脏页到磁盘
					执行合并插入缓冲的操作
					产生checkpoint
					清除无用的table cache
					如果当前没有用户活动，就可能切换到background loop
				每10s操作
					日志缓冲刷新到磁盘，即使这个事务还没有提交
					执行合并插入缓冲的操作
					刷新脏页到磁盘
					删除无用的undo页
					产生checkpoint
			后台循环background loop
			刷新循环flush loop
			暂停循环suspend loop
		read thread：读请求线程，4个
		write thread：写请求线程，4个
		redo log thread：负责把日志缓冲中的内容刷新到redo log文件中
		change buffer thread：负责把插入缓冲中的内容刷新到磁盘
		page cleaner thread：负责脏页刷新的线程
		purge thread：负责删除无用的undo页，1个
		checkpoint thread：是在redo log发生切换时，执行checkpoint。
		error monitor thread：负责数据库报错的监控线程
		lock monitor thread：负责锁的监控线程
	c、磁盘文件
		内存刷新机制
		redo log：重做日志文件，用于记录事务操作的变化，记录的是数据修改之后的值，不管事务是否提交都会记录下来。
			默认至少有两个redo log文件，在磁盘上用ib_logfile（0~N）命名，顺序写，循环写
		redo log buffer刷到磁盘的条件：
			通过innodb_flush_log_at_trx_commit参数来控制
				0：redo log thread每隔1s会将redo log buffer中的数据写入redo log文件，同时进行刷盘操作，保证数据确实已经写入磁盘。
				1：每次事务提交时，都会触发redo log thread将日志缓冲中的数据写入文件，并flush到磁盘。
				2：每次事务提交时，都会把redo log buffer的数据写入redo log文件，但是不会同时刷新到磁盘
			master thread每秒进行刷新
			redo log buffer使用超过一半的时候会触发刷新
		binlog：二进制日志文件，功能应用于备份恢复和主从复制
		从binlog cache刷新到磁盘的binlog文件的刷新条件：
			通过sync_binlog参数来决定
				0:当事务提交之后，mysql不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者
				cache满了之后才同步到磁盘。
				n：每进行n次事务提交之后，mysql将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
		数据库中的双一模式：sync_binlog=1，innodb_flush_log_at_trx_commit=1
		redo log与binlog的区别：
			记录内容不同
				binlog是逻辑日志，记录所有数据的改变信息
				redo log是物理日志，记录所有InnoDB表数据的变化
			记录内容时间不同
				binlog记录commit完毕之后的DML和DDL SQL语句。
				redo log记录事务发起之后的DML和DDL SQL语句。
			文件使用方式不同
				binlog不是循环使用，在写满或者实例重启之后，会生成新的binlog文件。
				redo log是循环使用，在最后一个文件写满之后，会重新写第一个文件。
			作用不同
				binlog可以作为恢复数据使用，主从复制搭建。
				redo log作为异常宕机或者介质故障后的数据恢复使用。
		mysql两阶段提交过程
			准备阶段：事务SQL语句先写入redo log buffer，然后做一个事务准备标记，再将log buffer中的数据刷新到redo log。
			提交阶段：将事务产生的binlog写入文件，刷入磁盘。
			再在redo log中做一个事务提交的标记，并把binlog写成功的标记一并写入redo log文件。
		脏页的刷新条件
			重做日志ib_logfile文件写满后，在切换的过程中会执行checkpoint，会触发脏页的刷新
			通过innodb_max_dirty_pages_pct参数的值来控制
			由innodb_adaptive_fulshing参数控制
	InnoDB存储结构（逻辑存储单元）
		表空间：是由段组成的
			系统表空间：以ibdata1来命名，存储所有数据的信息以及回滚段（undo）的信息
			独立表空间：innodb_file_per_table=1，存储对应表的B+树数据、索引、插入缓存等信息（.frm,.ibd）
			临时表空间：以ibtmp1命名，innodb_temp_data_file_path，information_schema下的innodb_temp_table_info表
			通用表空间
		段：每个段由N个区和32个零散的页组成，段空间扩展是以区为单位进行扩展的。
			创建一个索引的同时就会创建两个段，分别为非叶子节点和叶子节点。一个表有4个段，是索引个数的2倍。
		区：是由64个连续的页组成的，是物理上连续分配的一段空间，每个区的大小固定是1MB。
		页：最小物理存储分配单位page，默认大小是16KB。默认预留1/16用于更新数据，真正使用的是15/16的空间
			一个页最少可以存两行数据，虚拟最小行和虚拟最大行，用来限定行记录的范围，以此保证B+tree节点是双向链表结构
		行：InnoDB是面向列的，数据是按照行存储的。
			两种文件格式（和对应的行记录格式）
			Antelope
				compact：溢出的列只存放768个前缀字节。
				redundant：消耗更多的存储空间，不建议使用。
			Barracuda
				compressed：压缩行格式，是对数据和索引页进行压缩，只是针对物理存储层面上的压缩，不建议使用。
				dynamic：实际采用的数据都存放在溢出的页中，而数据页只存前20个字节的指针。（针对溢出列所在的新页利用率会更高）
		行溢出：需要存储的数据在当前存储页之外，拆分到多个页进行存储。
5、InnoDB的三大特性
	插入缓冲：把普通索引上的DML操作从随机I/O变成顺序I/O，提高I/O效率。
	两次写：保证写入的安全性，防止在mysql实例发生宕机时，InnoDB发生数据页部分页写的问题。
	自适应哈希索引：可以监控索引的搜索，如果InnoDB注意到查询可以通过建立哈希索引得到优化，那么就会自动完成这件事。
6、数据库文件
	数据库层面
		参数文件（my.cnf）
			client section
			server section
				innodb_buffer_pool：位于主内存中，用来缓存InnoDB表的数据、索引、插入缓冲、数据字典等信息，使常用数据可以直接在内存中被处理
				innodb_buffer_pool_inistance：InnoDB缓冲区可以被划分为多少个区域
				innodb_buffer_pool_load_at_startup
				innodb_buffer_pool_dump_at_shutdown
				元数据信息：space number和page number的列表信息
				innodb_data_file_path：指定系统表空间文件的路径和ibdata1文件的大小。
				innodb_flush_log_at_trx_commit
				sync_binlog
				innodb_max_dirty_pages_pct
				innodb_thread_concurrency：InnoDB内核最大并发线程数
				interactive_timeout
				wait_timeout：服务器关闭非交互
		错误日志（error.log）
		慢查询日志（slow log）
		全量日志（general log）
		二进制日志（binlog）
		审计日志（audit log）
		中继日志（relay log）
		套接字文件（socket）
		进程文件（pid）
		表结构文件
	存储引擎层
		redo log
		undo log