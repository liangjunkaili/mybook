什么是索引呢？为什么要用索引呢？
    通俗点讲，索引就像书的目录，是为了提高查询效率的。
索引是如何工作的呢？
    首先理解一个概念：数据模型（数据结构），下面我们对比几种；
    哈希表（使用链表解决哈希冲突）：适用等值查询的场景，区间查询需要全表扫描
    有序数组：适用静态存储引擎，插入数据效率太低
    搜索树：（读写的时间复杂度都是O(log(N))）
        二叉搜索树：搜索效率最高，但索引不止在内存中，还要写到磁盘，在数据量大的情况下，树高太大，导致读磁盘的次数增多，
            耗时太长
        N叉搜索树：至于N到底为多大，是根据数据块的大小决定的。
    下面我们具体到InnoDB（索引组织表）这个存储引擎来分析一下，使用了B+树索引模型。
    我们默认建表都会有一个主键索引，每一个索引对应一颗B+树
    通过主键索引，直接在主键索引这棵树上就可以查到数据；
    通过其他索引，首先要在其他索引的树上找到主键，然后再到主键索引这棵树上查数据；这个过程叫做回表。
    所以，我们应该尽可能使用主键索引。
    原因是什么呢？
        主键索引的叶子节点存储的是整行数据（page里有好多行），非主键索引的叶子节点存储的是主键的值！！！
索引的维护：（关注点：性能、利用率、存储空间）
    插入：页分裂（采用自增主键可以避免该问题，是不是明白了什么？）
    删除：页合并
    注：主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小
    alter table T engine=InnoDB：释放 delete 操作引起的页的空洞,也就是碎片空间
如何避免回表？
    覆盖索引
    前缀索引
    索引下推